{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport jwtDecode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../journal-api/src\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService {\n  constructor(authenticationService, http, authorService, editorService, reviewerService) {\n    this.authenticationService = authenticationService;\n    this.http = http;\n    this.authorService = authorService;\n    this.editorService = editorService;\n    this.reviewerService = reviewerService;\n  }\n  login(authenticationRequest) {\n    return this.authenticationService.authenticate(authenticationRequest);\n  }\n  getUserData(data) {\n    return new Observable(observer => {\n      let specs = this.getUserEmailAndRole(data);\n      let email = specs.email;\n      const encodedEmail = {\n        \"email\": email\n      };\n      let role = specs.roles[0];\n      switch (role) {\n        case 'AUTHOR':\n          this.authorService.getAuthorByEmail(encodedEmail).subscribe(auth => {\n            observer.next(auth);\n            observer.complete();\n          });\n          break;\n        case 'EDITOR':\n          this.editorService.getEditorByEmail(encodedEmail).subscribe(edit => {\n            observer.next(edit);\n            observer.complete();\n          });\n          break;\n        case 'REVIEWER':\n          this.reviewerService.getReviewerByEmail(encodedEmail).subscribe(rev => {\n            observer.next(rev);\n            observer.complete();\n          });\n          break;\n        default:\n          observer.error('Invalid role');\n        // You can handle this case as needed\n      }\n    });\n  }\n\n  getUserEmailAndRole(authenticationResponse) {\n    // localStorage.setItem('accessToken', JSON.stringify(authenticationResponse));\n    this.isAuthenticated = true;\n    this.token = authenticationResponse['accessToken'] ?? '';\n    let decodedJwt = jwtDecode(this.token);\n    this.email = decodedJwt.sub;\n    this.roles = decodedJwt.role;\n    return {\n      'email': this.email,\n      'roles': this.roles\n    };\n  }\n  setConnectedUser(user) {\n    localStorage.setItem('connectedUser', user);\n    console.log(localStorage.getItem('connectedUser'));\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i1.AuthorService), i0.ɵɵinject(i1.EditorService), i0.ɵɵinject(i1.ReviewerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","jwtDecode","UserService","constructor","authenticationService","http","authorService","editorService","reviewerService","login","authenticationRequest","authenticate","getUserData","data","observer","specs","getUserEmailAndRole","email","encodedEmail","role","roles","getAuthorByEmail","subscribe","auth","next","complete","getEditorByEmail","edit","getReviewerByEmail","rev","error","authenticationResponse","isAuthenticated","token","decodedJwt","sub","setConnectedUser","user","localStorage","setItem","console","log","getItem","_","i0","ɵɵinject","i1","AuthenticationService","i2","HttpClient","AuthorService","EditorService","ReviewerService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\waela\\OneDrive\\Documents\\finalYearProject\\Journal-front\\src\\app\\services\\user\\user.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {\n    AuthenticationRequest,\n    AuthenticationResponse,\n    AuthenticationService,\n    AuthorDTO, AuthorService, EditorDTO, EditorService, ReviewerDTO, ReviewerService\n} from \"../../../journal-api/src\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport jwtDecode from \"jwt-decode\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    token!: string;\n    isAuthenticated!: boolean;\n    email!: string;\n    roles!: any;\n\n    constructor(private authenticationService: AuthenticationService, private http: HttpClient,\n                private authorService: AuthorService, private editorService: EditorService,\n                private reviewerService: ReviewerService\n    ) {\n    }\n\n    login(authenticationRequest: AuthenticationRequest) {\n       return  this.authenticationService.authenticate(authenticationRequest);\n    }\n    getUserData(data: any): Observable<any> {\n        return new Observable((observer) => {\n            let specs: any = this.getUserEmailAndRole(data);\n            let email: string = specs.email;\n            const encodedEmail = { \"email\": email };\n            let role: string = specs.roles[0];\n\n            switch (role) {\n                case 'AUTHOR':\n                    this.authorService.getAuthorByEmail(encodedEmail).subscribe((auth: AuthorDTO) => {\n                        observer.next(auth);\n                        observer.complete();\n                    });\n                    break;\n\n                case 'EDITOR':\n                    this.editorService.getEditorByEmail(encodedEmail).subscribe((edit: EditorDTO) => {\n                        observer.next(edit);\n                        observer.complete();\n                    });\n                    break;\n\n                case 'REVIEWER':\n                    this.reviewerService.getReviewerByEmail(encodedEmail).subscribe((rev: ReviewerDTO) => {\n                        observer.next(rev);\n                        observer.complete();\n                    });\n                    break;\n\n                default:\n                    observer.error('Invalid role'); // You can handle this case as needed\n            }\n        });\n    }\n\n\n    getUserEmailAndRole(authenticationResponse: AuthenticationResponse) {\n        // localStorage.setItem('accessToken', JSON.stringify(authenticationResponse));\n        this.isAuthenticated = true;\n        this.token = authenticationResponse['accessToken'] ?? '';\n        let decodedJwt: any = jwtDecode(this.token);\n        this.email = decodedJwt.sub;\n        this.roles = decodedJwt.role;\n        return {\n            'email': this.email,\n            'roles': this.roles\n        }\n    }\n\n    setConnectedUser(user: any): void {\n      localStorage.setItem('connectedUser', user);\n      console.log(localStorage.getItem('connectedUser')) ;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}