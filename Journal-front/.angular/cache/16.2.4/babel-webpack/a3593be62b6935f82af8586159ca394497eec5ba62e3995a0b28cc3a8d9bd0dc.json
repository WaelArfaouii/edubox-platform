{"ast":null,"code":"import { HttpHeaders, HttpParams, HttpContext } from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\n// @ts-ignore\nimport { BASE_PATH } from '../variables';\nimport { Configuration } from '../configuration';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../configuration\";\nexport class ItemService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://localhost:8083';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (Array.isArray(basePath) && basePath.length > 0) {\n        basePath = basePath[0];\n      }\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n  // @ts-ignore\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n    return httpParams;\n  }\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n    return httpParams;\n  }\n  deleteItemById(id, observe = 'body', reportProgress = false, options) {\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling deleteItemById.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `/items/delete/${this.configuration.encodeParam({\n      name: \"id\",\n      value: id,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: \"int64\"\n    })}`;\n    return this.httpClient.request('delete', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n  downloadFile(iditem, fileId, observe = 'body', reportProgress = false, options) {\n    if (iditem === null || iditem === undefined) {\n      throw new Error('Required parameter iditem was null or undefined when calling downloadFile.');\n    }\n    if (fileId === null || fileId === undefined) {\n      throw new Error('Required parameter fileId was null or undefined when calling downloadFile.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let localVarPath = `//items/${this.configuration.encodeParam({\n      name: \"iditem\",\n      value: iditem,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: \"int64\"\n    })}/download/${this.configuration.encodeParam({\n      name: \"fileId\",\n      value: fileId,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"string\",\n      dataFormat: undefined\n    })}`;\n    return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: \"blob\",\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n  getItemById(id, observe = 'body', reportProgress = false, options) {\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getItemById.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `//items/${this.configuration.encodeParam({\n      name: \"id\",\n      value: id,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: \"int64\"\n    })}`;\n    return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n  getItems(idman, observe = 'body', reportProgress = false, options) {\n    if (idman === null || idman === undefined) {\n      throw new Error('Required parameter idman was null or undefined when calling getItems.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `/${this.configuration.encodeParam({\n      name: \"idman\",\n      value: idman,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: \"int64\"\n    })}/items`;\n    return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n  saveItem(idman, model, saveItemRequest, observe = 'body', reportProgress = false, options) {\n    if (idman === null || idman === undefined) {\n      throw new Error('Required parameter idman was null or undefined when calling saveItem.');\n    }\n    if (model === null || model === undefined) {\n      throw new Error('Required parameter model was null or undefined when calling saveItem.');\n    }\n    let localVarQueryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n    if (model !== undefined && model !== null) {\n      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, model, 'model');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    // to determine the Content-Type header\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `/${this.configuration.encodeParam({\n      name: \"idman\",\n      value: idman,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: \"int64\"\n    })}/items/save`;\n    return this.httpClient.request('post', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      body: saveItemRequest,\n      params: localVarQueryParameters,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n  static #_ = this.ɵfac = function ItemService_Factory(t) {\n    return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(i2.Configuration, 8));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ItemService,\n    factory: ItemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","HttpContext","CustomHttpParameterCodec","BASE_PATH","Configuration","ItemService","constructor","httpClient","basePath","configuration","defaultHeaders","Array","isArray","length","encoder","addToHttpParams","httpParams","value","key","Date","addToHttpParamsRecursive","forEach","elem","append","toISOString","substring","Error","Object","keys","k","deleteItemById","id","observe","reportProgress","options","undefined","localVarHeaders","localVarHttpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","selectHeaderAccept","set","localVarHttpContext","context","responseType_","startsWith","isJsonMime","localVarPath","encodeParam","name","in","style","explode","dataType","dataFormat","request","responseType","withCredentials","headers","downloadFile","iditem","fileId","getItemById","getItems","idman","saveItem","model","saveItemRequest","localVarQueryParameters","consumes","httpContentTypeSelected","selectHeaderContentType","body","params","_","i0","ɵɵinject","i1","HttpClient","i2","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\waela\\OneDrive\\Documents\\edubox-platform\\Journal-front\\src\\journal-api\\src\\api\\item.service.ts"],"sourcesContent":["/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ItemDTO } from '../model/itemDTO';\n// @ts-ignore\nimport { SaveItemRequest } from '../model/saveItemRequest';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n    protected basePath = 'http://localhost:8083';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (Array.isArray(basePath) && basePath.length > 0) {\n                basePath = basePath[0];\n            }\n\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    // @ts-ignore\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteItemById(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<object>;\n    public deleteItemById(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<object>>;\n    public deleteItemById(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<object>>;\n    public deleteItemById(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteItemById.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/items/delete/${this.configuration.encodeParam({name: \"id\", value: id, in: \"path\", style: \"simple\", explode: false, dataType: \"number\", dataFormat: \"int64\"})}`;\n        return this.httpClient.request<object>('delete', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param iditem \n     * @param fileId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public downloadFile(iditem: number, fileId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Blob>;\n    public downloadFile(iditem: number, fileId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Blob>>;\n    public downloadFile(iditem: number, fileId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Blob>>;\n    public downloadFile(iditem: number, fileId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n        if (iditem === null || iditem === undefined) {\n            throw new Error('Required parameter iditem was null or undefined when calling downloadFile.');\n        }\n        if (fileId === null || fileId === undefined) {\n            throw new Error('Required parameter fileId was null or undefined when calling downloadFile.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let localVarPath = `//items/${this.configuration.encodeParam({name: \"iditem\", value: iditem, in: \"path\", style: \"simple\", explode: false, dataType: \"number\", dataFormat: \"int64\"})}/download/${this.configuration.encodeParam({name: \"fileId\", value: fileId, in: \"path\", style: \"simple\", explode: false, dataType: \"string\", dataFormat: undefined})}`;\n        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: \"blob\",\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getItemById(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ItemDTO>;\n    public getItemById(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ItemDTO>>;\n    public getItemById(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ItemDTO>>;\n    public getItemById(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getItemById.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `//items/${this.configuration.encodeParam({name: \"id\", value: id, in: \"path\", style: \"simple\", explode: false, dataType: \"number\", dataFormat: \"int64\"})}`;\n        return this.httpClient.request<ItemDTO>('get', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param idman \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getItems(idman: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ItemDTO>>;\n    public getItems(idman: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ItemDTO>>>;\n    public getItems(idman: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ItemDTO>>>;\n    public getItems(idman: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n        if (idman === null || idman === undefined) {\n            throw new Error('Required parameter idman was null or undefined when calling getItems.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/${this.configuration.encodeParam({name: \"idman\", value: idman, in: \"path\", style: \"simple\", explode: false, dataType: \"number\", dataFormat: \"int64\"})}/items`;\n        return this.httpClient.request<Array<ItemDTO>>('get', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param idman \n     * @param model \n     * @param saveItemRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveItem(idman: number, model: string, saveItemRequest?: SaveItemRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ItemDTO>;\n    public saveItem(idman: number, model: string, saveItemRequest?: SaveItemRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ItemDTO>>;\n    public saveItem(idman: number, model: string, saveItemRequest?: SaveItemRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ItemDTO>>;\n    public saveItem(idman: number, model: string, saveItemRequest?: SaveItemRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n        if (idman === null || idman === undefined) {\n            throw new Error('Required parameter idman was null or undefined when calling saveItem.');\n        }\n        if (model === null || model === undefined) {\n            throw new Error('Required parameter model was null or undefined when calling saveItem.');\n        }\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (model !== undefined && model !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>model, 'model');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' | 'blob' = 'json';\n        if (localVarHttpHeaderAcceptSelected) {\n            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n                responseType_ = 'text';\n            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n                responseType_ = 'json';\n            } else {\n                responseType_ = 'blob';\n            }\n        }\n\n        let localVarPath = `/${this.configuration.encodeParam({name: \"idman\", value: idman, in: \"path\", style: \"simple\", explode: false, dataType: \"number\", dataFormat: \"int64\"})}/items/save`;\n        return this.httpClient.request<ItemDTO>('post', `${this.configuration.basePath}${localVarPath}`,\n            {\n                context: localVarHttpContext,\n                body: saveItemRequest,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}