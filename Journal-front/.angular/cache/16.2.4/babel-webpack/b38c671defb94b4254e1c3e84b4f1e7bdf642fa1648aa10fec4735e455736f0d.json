{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { authenticate } from '../fn/authentication/authenticate';\nimport { register } from '../fn/authentication/register';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthenticationService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `register()` */\n  static #_ = this.RegisterPath = '/auth/register';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `register()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  register$Response(params, context) {\n    return register(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `register$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  register(params, context) {\n    return this.register$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `authenticate()` */\n  static #_2 = this.AuthenticatePath = '/auth/login';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `authenticate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  authenticate$Response(params, context) {\n    return authenticate(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `authenticate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  authenticate(params, context) {\n    return this.authenticate$Response(params, context).pipe(map(r => r.body));\n  }\n  static #_3 = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","BaseService","authenticate","register","AuthenticationService","constructor","config","http","_","RegisterPath","register$Response","params","context","rootUrl","pipe","r","body","_2","AuthenticatePath","authenticate$Response","_3","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","_4","factory","ɵfac","providedIn"],"sources":["C:\\Users\\waela\\OneDrive\\Documents\\finalYearProject\\Journal-front\\src\\journal-api\\src\\services\\authentication.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {Observable, pipe} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { authenticate } from '../fn/authentication/authenticate';\r\nimport { Authenticate$Params } from '../fn/authentication/authenticate';\r\nimport { AuthenticationResponse } from '../models/authentication-response';\r\nimport { register } from '../fn/authentication/register';\r\nimport { Register$Params } from '../fn/authentication/register';\r\nimport {AuthenticationRequest} from \"../models/authentication-request\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `register()` */\r\n  static readonly RegisterPath = '/auth/register';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `register()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return register(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `register$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  register(params: Register$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.register$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `authenticate()` */\r\n  static readonly AuthenticatePath = '/auth/login';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `authenticate()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  authenticate$Response(params: AuthenticationRequest, context?: HttpContext | undefined): Observable<StrictHttpResponse<AuthenticationResponse>> {\r\n    return authenticate(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `authenticate$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  authenticate(params: AuthenticationRequest, context?: HttpContext): Observable<AuthenticationResponse> {\r\n    return this.authenticate$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<AuthenticationResponse>): AuthenticationResponse => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,YAAY,QAAQ,mCAAmC;AAGhE,SAASC,QAAQ,QAAQ,+BAA+B;;;;AAKxD,OAAM,MAAOC,qBAAsB,SAAQH,WAAW;EACpDI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;EAAA,QAAAC,CAAA,GACgB,KAAAC,YAAY,GAAG,gBAAgB;EAE/C;;;;;;EAMAC,iBAAiBA,CAACC,MAAuB,EAAEC,OAAqB;IAE9D,OAAOT,QAAQ,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACM,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3D;EAEA;;;;;;EAMAT,QAAQA,CAACQ,MAAuB,EAAEC,OAAqB;IAErD,OAAO,IAAI,CAACF,iBAAiB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjDd,GAAG,CAAEe,CACT,IACGA,CAAC,CAACC,IAAI,CAAC,CACP;EACH;EAEA;EAAA,QAAAC,EAAA,GACgB,KAAAC,gBAAgB,GAAG,aAAa;EAEhD;;;;;;EAMAC,qBAAqBA,CAACR,MAA6B,EAAEC,OAAiC;IACpF,OAAOV,YAAY,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACM,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAV,YAAYA,CAACS,MAA6B,EAAEC,OAAqB;IAC/D,OAAO,IAAI,CAACO,qBAAqB,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDd,GAAG,CAAEe,CAA6C,IAA6BA,CAAC,CAACC,IAAI,CAAC,CACvF;EACH;EAAC,QAAAI,EAAA,G;qBAzDUhB,qBAAqB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBvB,qBAAqB;IAAAwB,OAAA,EAArBxB,qBAAqB,CAAAyB,IAAA;IAAAC,UAAA,EADR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}