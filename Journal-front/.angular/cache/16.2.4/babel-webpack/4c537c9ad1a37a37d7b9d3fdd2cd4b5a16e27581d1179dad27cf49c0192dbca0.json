{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport jwtDecode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../journal-api/src\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService {\n  constructor(authenticationService, http, authorService, editorService, reviewerService) {\n    this.authenticationService = authenticationService;\n    this.http = http;\n    this.authorService = authorService;\n    this.editorService = editorService;\n    this.reviewerService = reviewerService;\n    this.isRevivewerAuthenticated = false;\n    this.isEditorAuthenticated = false;\n    this.isAuthorAuthenticated = false;\n  }\n  login(authenticationRequest) {\n    return this.authenticationService.authenticate(authenticationRequest);\n  }\n  getUserData(data) {\n    return new Observable(observer => {\n      let specs = this.getUserEmailAndRole(data);\n      let email = specs.email;\n      const encodedEmail = {\n        \"email\": email\n      };\n      let role = specs.roles[0];\n      switch (role) {\n        case 'AUTHOR':\n          this.isRevivewerAuthenticated = false;\n          this.isEditorAuthenticated = false;\n          this.isAuthorAuthenticated = true;\n          this.authorService.getAuthorByEmail(encodedEmail).subscribe(auth => {\n            observer.next(auth);\n            observer.complete();\n          });\n          break;\n        case 'EDITOR':\n          this.isRevivewerAuthenticated = false;\n          this.isEditorAuthenticated = true;\n          this.isAuthorAuthenticated = false;\n          this.editorService.getEditorByEmail(encodedEmail).subscribe(edit => {\n            observer.next(edit);\n            observer.complete();\n          });\n          break;\n        case 'REVIEWER':\n          this.isRevivewerAuthenticated = true;\n          this.isEditorAuthenticated = false;\n          this.isAuthorAuthenticated = false;\n          this.reviewerService.getReviewerByEmail(encodedEmail).subscribe(rev => {\n            observer.next(rev);\n            observer.complete();\n          });\n          break;\n        default:\n          observer.error('Invalid role');\n        // You can handle this case as needed\n      }\n    });\n  }\n\n  getUserEmailAndRole(authenticationResponse) {\n    this.token = authenticationResponse['accessToken'] ?? '';\n    let decodedJwt = jwtDecode(this.token);\n    this.email = decodedJwt.sub;\n    this.roles = decodedJwt.role;\n    return {\n      'email': this.email,\n      'roles': this.roles\n    };\n  }\n  setConnectedUser(user) {\n    localStorage.setItem('connectedUser', JSON.stringify(user));\n  }\n  getConnectedUser() {\n    const storedUserString = localStorage.getItem('connectedUser');\n    if (storedUserString) {\n      const storedUser = JSON.parse(storedUserString);\n      console.log(storedUser);\n      return storedUser;\n    } else {\n      console.log('No user data found in localStorage');\n    }\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i1.AuthorService), i0.ɵɵinject(i1.EditorService), i0.ɵɵinject(i1.ReviewerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","jwtDecode","UserService","constructor","authenticationService","http","authorService","editorService","reviewerService","isRevivewerAuthenticated","isEditorAuthenticated","isAuthorAuthenticated","login","authenticationRequest","authenticate","getUserData","data","observer","specs","getUserEmailAndRole","email","encodedEmail","role","roles","getAuthorByEmail","subscribe","auth","next","complete","getEditorByEmail","edit","getReviewerByEmail","rev","error","authenticationResponse","token","decodedJwt","sub","setConnectedUser","user","localStorage","setItem","JSON","stringify","getConnectedUser","storedUserString","getItem","storedUser","parse","console","log","_","i0","ɵɵinject","i1","AuthenticationService","i2","HttpClient","AuthorService","EditorService","ReviewerService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\waela\\OneDrive\\Documents\\finalYearProject\\Journal-front\\src\\app\\services\\user\\user.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {\n    AuthenticationRequest,\n    AuthenticationResponse,\n    AuthenticationService,\n    AuthorDTO, AuthorService, EditorDTO, EditorService, ReviewerDTO, ReviewerService\n} from \"../../../journal-api/src\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport jwtDecode from \"jwt-decode\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    token!: string;\n    isRevivewerAuthenticated: boolean =false;\n    isEditorAuthenticated: boolean =false;\n    isAuthorAuthenticated: boolean =false;\n    email!: string;\n    roles!: any;\n\n    constructor(private authenticationService: AuthenticationService, private http: HttpClient,\n                private authorService: AuthorService, private editorService: EditorService,\n                private reviewerService: ReviewerService\n    ) {\n    }\n\n    login(authenticationRequest: AuthenticationRequest) {\n       return  this.authenticationService.authenticate(authenticationRequest);\n    }\n    getUserData(data: any): Observable<any> {\n        return new Observable((observer) => {\n            let specs: any = this.getUserEmailAndRole(data);\n            let email: string = specs.email;\n            const encodedEmail = { \"email\": email };\n            let role: string = specs.roles[0];\n\n            switch (role) {\n                case 'AUTHOR':\n                  this.isRevivewerAuthenticated=false;\n                  this.isEditorAuthenticated=false;\n                  this.isAuthorAuthenticated=true;\n                    this.authorService.getAuthorByEmail(encodedEmail).subscribe((auth: AuthorDTO) => {\n                        observer.next(auth);\n                        observer.complete();\n                    });\n                    break;\n\n                case 'EDITOR':\n                    this.isRevivewerAuthenticated=false;\n                    this.isEditorAuthenticated=true;\n                    this.isAuthorAuthenticated=false;\n                    this.editorService.getEditorByEmail(encodedEmail).subscribe((edit: EditorDTO) => {\n                        observer.next(edit);\n                        observer.complete();\n                    });\n                    break;\n\n                case 'REVIEWER':\n                    this.isRevivewerAuthenticated=true;\n                    this.isEditorAuthenticated=false;\n                    this.isAuthorAuthenticated=false;\n                    this.reviewerService.getReviewerByEmail(encodedEmail).subscribe((rev: ReviewerDTO) => {\n                        observer.next(rev);\n                        observer.complete();\n                    });\n                    break;\n\n                default:\n                    observer.error('Invalid role'); // You can handle this case as needed\n            }\n        });\n    }\n\n\n    getUserEmailAndRole(authenticationResponse: AuthenticationResponse) {\n        this.token = authenticationResponse['accessToken'] ?? '';\n        let decodedJwt: any = jwtDecode(this.token);\n        this.email = decodedJwt.sub;\n        this.roles = decodedJwt.role;\n        return {\n            'email': this.email,\n            'roles': this.roles\n        }\n    }\n\n  setConnectedUser(user: any): void {\n    localStorage.setItem('connectedUser', JSON.stringify(user));\n    }\n   getConnectedUser() {\n     const storedUserString = localStorage.getItem('connectedUser');\n     if (storedUserString) {\n       const storedUser = JSON.parse(storedUserString);\n       console.log(storedUser) ;\n       return storedUser ;\n     } else {\n       console.log('No user data found in localStorage');\n     }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}